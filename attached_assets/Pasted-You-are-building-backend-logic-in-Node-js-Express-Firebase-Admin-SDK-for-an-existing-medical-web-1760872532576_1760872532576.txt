You are building backend logic in Node.js (Express + Firebase Admin SDK) for an existing medical web application that already has the following Firestore collections:
- doctors
- patients
- healthTimeline
- reports
- sharedReports

Security rules are already configured so that users can only access their own data.

Now, create the **core backend setup** and logic for:
1. A **many-to-many mapping** between doctors and patients.
   - Each patient can be treated by multiple doctors.
   - Each doctor can have multiple patients.
   - This mapping should be stored inside the `sharedReports` collection.

2. Build the Firebase connection (`firebaseConfig.js`) and Express server with CORS enabled.

3. Implement the **AI-based doctor mapping logic** (mock version):
   - Create a helper function `analyzeSymptoms(text)` that detects doctor specialization from report description.
   - Example mapping:
     - If the report or symptoms mention "skin", assign a doctor with specialization "Dermatologist".
     - If "heart" or "bp" → "Cardiologist"
     - If "bone" or "fracture" → "Orthopedic"
     - If none match, assign "General Physician".

4. Implement route:
   - `POST /uploadReport`
     - Accepts patientId, report URL, symptoms/summary, and an optional description.
     - Uses `analyzeSymptoms()` to detect specialization.
     - Searches `doctors` collection for one doctor with that specialization.
     - Creates a new document in `sharedReports` including:
       - auto-generated reportId
       - patientId
       - doctorId
       - reportURL
       - detectedSpecialization
       - reportSummary
       - timestamp
     - Returns a success message and assigned doctor info.

5. Code should be modular:
   - `firebaseConfig.js` for Firestore setup
   - `routes/report.js` for report upload logic
   - `index.js` for server setup

6. Use async/await and proper error handling.
7. Add clear comments explaining each part of the AI mapping and database insertion logic.

Goal: Establish the base system for uploading reports, AI doctor matching, and mapping storage under `sharedReports`, while maintaining the existing Firestore structure.
